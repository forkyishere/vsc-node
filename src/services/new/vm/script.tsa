//@ts-nocheck
import { JSON } from 'assemblyscript-json/assembly'
// import {JSON} from 'json-as'

// import { sdk } from '@vsc.eco/sdk'

declare function consoleLog(arg0: String): void
declare function logNumber(arg0: i32): void
declare function logBool(arg0: bool): void
declare function logUint8Array(arg0: Uint8Array): void
declare function api(): string

declare namespace db {
  function setObject(key: String, val: String): i32
  function getObject(key: String): String
}

class ObjType {
  callCount: i32
}
const obj:ObjType = {
  callCount: 0
}

@serializable
class Paramters {
  to: string
  from: string
}
export function testJSON(payload: string):string {
  // consoleLog(payload)
  //   const jsonPayload:Paramters = JSON.parse<Paramters>(payload)
  //   consoleLog(jsonPayload.to)
    // if(jsonPayload.isObj === true) {
      
    // }
    let jsonObj: JSON.Obj = <JSON.Obj>(JSON.parse(payload));

    consoleLog(jsonObj.stringify())
    consoleLog(jsonObj.keys[0])
    jsonObj.keys.forEach((e) => {
      consoleLog(e)
    })
    
    
   
    obj.callCount = obj.callCount + 1
    return `Count: ${obj.callCount}`
}

export function test(call: Uint8Array): i32 {
  // logNumber(call)
  logUint8Array(call)
  if (call === 'set') {
    db.setObject('name', 'space')
    consoleLog('testing')
  }
  return 4
}
export function testString(a: string): void {
  consoleLog(a + 'world')
  api()
    .split('.')
    .map((e: string): string => {
      consoleLog(e)
      consoleLog((parseInt(e) * 5).toString())
      logBool(parseInt(e) * 5 === 810)
      return (parseInt(e) * 5).toString()
    })
  // let bytes = new Uint8Array(this.len);
  // memory.copy(bytes.dataStart, a)
  // return bytes
}
